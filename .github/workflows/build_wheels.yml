name: BuildWheels

on: [push, pull_request]

#name: Wheels

#on:
#  workflow_dispatch:
#  pull_request:
#  push:
#    branches:
#     - master
#  release:
#    types:
#      - published

#env:
#  CIBW_TEST_COMMAND: pytest {project}/tests
#  CIBW_TEST_EXTRAS: test


jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: pypa/cibuildwheel@v2.2.0

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl


#  upload_all:
#    name: Upload if release
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'release' && github.event.action == 'published'
#
#    steps:
#    - uses: actions/setup-python@v2
#
#    - uses: actions/download-artifact@v2
#      with:
#        name: artifact
#        path: dist
#
#    - uses: pypa/gh-action-pypi-publish@v1.4.2
#      with:
#        user: __token__
#        password: ${{ secrets.pypi_password }}
#

#jobs:
#  build_wheels:
#    name: Build wheels on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-20.04, macos-10.15]
#
#    steps:
#      - uses: actions/checkout@v2
#        with:
#            submodules: true
#
#      - name: Build wheels
#        uses: pypa/cibuildwheel@v2.1.2
#        # to supply options, put them in 'env', like:
#        # env:
#        #   CIBW_SOME_OPTION: value
#
#      - uses: actions/upload-artifact@v2
#        with:
#          path: ./wheelhouse/*.whl

#jobs:
#    build_wheels:
#        name: Build wheels on ${{ matrix.os }}
#        runs-on: ${{ matrix.os }}
#        strategy:
#            matrix:
#                os: [ubuntu-20.04, macos-10.15]
#        steps:
#            - uses: actions/checkout@v2
#              with:
#                  submodules: true
#
#            - uses: actions/setup-python@v2
#              name: Install Python
#              with:
#                  python-version: '3.8'
#
#            - name: Build wheels
#              uses: pypa/cibuildwheel@v2.2.1
#
#            - uses: actions/upload-artifact@v2
#              with:
#                  name: my-wheels
#                  path: ./wheelhouse/*.whl
#
#    build_sdist:
#        name: Build source distribution
#        runs-on: ubuntu-latest
#        steps:
#            - uses: actions/checkout@v2
#              with:
#                  submodules: true
#
#            - uses: actions/setup-python@v2
#              name: Install Python
#              with:
#                  python-version: '3.8'
#
#            - name: Build sdist
#              run: 
#                    python -m pip install scikit-build
#                    python setup.py sdist
#
#            - uses: actions/upload-artifact@v2
#              with:
#                  name: my-dist
#                  path: dist/*.tar.gz
#
#    upload_pypi:
#      needs: [build_wheels, build_sdist]
#      runs-on: ubuntu-latest
#      # upload to PyPI on every tag starting with 'v'
#      if: github.event_name == 'push' # && startsWith(github.event.ref, 'refs/tags/v')
#      # alternatively, to publish when a GitHub Release is created, use the following rule:
#      # if: github.event_name == 'release' && github.event.action == 'published'
#      steps:
#        - uses: actions/download-artifact@v2
#          with:
#            name: artifact
#            path: dist
#    
#        - uses: pypa/gh-action-pypi-publish@v1.4.2
#          with:
#            user: __token__
#            password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#            repository_url: https://test.pypi.org/legacy/
#            # To test: repository_url: https://test.pypi.org/legacy/
